DEPNDANCE :
libglib2.0-dev


How to test

simulate the serveur with netcat
ex : nc -l -p 3333
ou : nc -l 3333 sa depend des netcat

launch the client

afficher la case courante
p
afficher le  curseur
pc

reveller ce qu'il y a autour du curseur
vcmmll
<v : voir><c : curseur><m : mur left><m : mur right><tout mais pas m : route haut><tout mais pas m : route bas>

write the command to the client RTFS



tuto git :

sudo apt-get update
#(' installe git core en dependance ')
sudo apt-get install gitk git-gui
# aller dans le repertoire pour vos sources
cd /home/julien/src
# vous choper tout le dépot en read only
git clone http://github.com/Najon/IA-labyrinthe.git
git config --global user.name "Massot Julien"
git config --global user.mail massot.julien@gmail.com

# vous faites vos changement
# vous lancer git-gui
# vous selectionner les fichiers à commiter,
# faites davantage plusieurs commits simple pour que l'on comprenne
# ou que l'on puisse retirer juste un patch et garder le reste
# vous mettez un ptit message sympa qui décrit ce qu'il y a dans le commit
# vous committez mais vous ne pushez pas
# pour david et karim vous pouvez pushé si vous avez pris le bon URL read-write
# ensuite vous lancé gtik vous devriez voir vos ou votre commit au dessus du remotes/origin
# creer votre patch, un patch est créer par commit
git format-patch origin
# j'obtient un joli fichier 0001-fix-README.patch, que vous envoyez par mail a moi, david et karim et si possible toute la classe pour qu'on voye ce qui avance



pour tester si la box est à un état :
pas un mur :
if ( ! (pbox->state & MUR) )
si il y a soit une mine soit une pelle soit un collet :
if ( pbox->state & ( PELLE | COLLET | MINE ))
si il y a une mine et un joueur
if ( ( pbox->state & MINE )  && ( pbox->state & PLAYER ) )

